{"version":3,"sources":["MoviePoster.js","Movie.js","headerNav.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","state","moviePosterSrc","movieTitle","date","mvDirector","mvActor","mvUserRating","mvLink","mvGrade","getMoviePoster","a","title","props","grade","movieGrage","axios","get","params","query","moviesPoster","movieData","data","items","console","log","setState","image","pubDate","director","actor","parseFloat","userRating","link","this","replace","Director","Actor","slice","className","src","alt","href","Component","Movie","movieDate","HeaderNav","App","isLoding","movies","getMovies","listData","boxOfficeResult","dailyBoxOfficeList","map","movieList","key","rank","temporal","movieNm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.28ce77c3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\n\r\n\r\nclass MoviePoster extends Component {\r\n\r\n    \r\nstate = {\r\n    moviePosterSrc:'img',\r\n    movieTitle:'title',\r\n    date:'pubDate',\r\n    mvDirector:'director',\r\n    mvActor:'actor',\r\n    mvUserRating:0,\r\n    mvLink:'link',\r\n    mvGrade:'grade'\r\n}\r\n\r\ngetMoviePoster = async () => {\r\n\r\n    let title =this.props.movieTitle;   \r\n    let grade=this.props.movieGrage;\r\n\r\n\r\n    const moviesPoster=await axios.get(\"http://localhost:3001/search\",{\r\n        params:{\r\n            query:title\r\n        }\r\n    });\r\n\r\n    \r\n    var movieData=moviesPoster.data.items;\r\n    console.log(movieData[0]);\r\n    \r\n    \r\n    this.setState({\r\n        moviePosterSrc:movieData[0].image,\r\n        movieTitle:movieData[0].title,\r\n        date:movieData[0].pubDate,\r\n        mvDirector:movieData[0].director,\r\n        mvActor:movieData[0].actor,\r\n        mvUserRating:parseFloat(movieData[0].userRating),\r\n        mvLink:movieData[0].link,\r\n        mvGrade:grade\r\n    });\r\n    \r\n\r\n}\r\n\r\ncomponentDidMount(){\r\n        this.getMoviePoster();\r\n}\r\n\r\nrender(){\r\n   \r\n\r\n    const {moviePosterSrc,movieTitle,date,mvDirector,mvActor,mvUserRating,mvLink,mvGrade} = this.state;\r\n    let title=movieTitle.replace(/(<([^>]+)>)/ig,\" \");\r\n    let Director=mvDirector.replace(\"|\",\"\");\r\n    let Actor=mvActor.replace(/\\|/g,\",\");\r\n        Actor=Actor.slice(0,-1);\r\n \r\n    return(\r\n        <div className=\"movieData\">\r\n            <img src={moviePosterSrc} alt={movieTitle}/>     \r\n            <div className=\"movieInnerData\">\r\n                <h4 className=\"moveiGrade\">{mvGrade}위</h4>\r\n                <h3 className=\"movieTitle\">{title}</h3>\r\n                <h2 className=\"movieRating\">{mvUserRating}</h2>\r\n                <h5 className=\"movieYear\"> {date}</h5>\r\n                <h5 className=\"movieDirector\">Director | {Director}</h5>\r\n                <h5 className=\"movieActor\">Actor | {Actor}</h5>\r\n                <h5 className=\"movieLink\"><a href={mvLink}>영화 자세히보기</a></h5>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n}\r\n\r\nexport default MoviePoster;","import React from 'react';\r\nimport MoviesPoster from \"./MoviePoster\";\r\n\r\n\r\nfunction Movie({title,grade,date}){\r\n    console.log(title);\r\n    return (\r\n        <div className=\"movie\">\r\n            <MoviesPoster movieTitle={title} movieDate={date} movieGrage={grade} />\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\r\n\r\nclass HeaderNav extends Component {\r\n\r\n\r\n    render(){\r\n\r\n    \r\n        return(\r\n\r\n            <header>\r\n                <h1>Movie 박스오피스<span>6월 3일자</span></h1>\r\n            </header>\r\n    \r\n        );\r\n\r\n\r\n    }\r\n    \r\n}\r\n\r\nexport default HeaderNav;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from \"./Movie\";\nimport axios from \"axios\";\nimport HeaderNav from \"./headerNav\";\n\nclass App extends Component {\n\n  state = {\n    isLoding : true,\n    movies:[]\n  }\n\n  getMovies = async () => {\n\n    try {\n\n      const listData=await axios.get(\"https://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=88e5912e2bfb079238ca7936c0322922&targetDt=20200603\");\n  \n      console.log(listData.data.boxOfficeResult.dailyBoxOfficeList);\n           //api에서 얻은 무비 리스트를 state안에 넣어야함,\n      this.setState({\n            movies:listData.data.boxOfficeResult.dailyBoxOfficeList,\n            isLoding:false\n          });\n      } catch (error) {\n        console.log(error);\n      }  \n   \n  }\n\n  componentDidMount(){\n    this.getMovies();\n  }\n\n  render(){\n\n    const { isLoding, movies } = this.state;\n    return(\n        <div className=\"container\">\n            <HeaderNav></HeaderNav>\n            { isLoding ? (<div className=\"loader\">\n                          <span className=\"loader_text\">Loading.....</span>\n                        </div>\n                    ) : ( \n                      <div className=\"movies\">\n                          {movies.map(movieList => (\n                              <Movie\tkey={movieList.rank} date={movieList.temporal} title={movieList.movieNm} grade={movieList.rank} />\n                          ))}\n                      </div>  \n                        \n            )}\n            \n         \n         \n        </div>\n\n    );//end of return\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('wrap')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}