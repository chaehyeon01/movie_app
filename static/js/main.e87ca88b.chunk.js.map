{"version":3,"sources":["MoviePoster.js","Movie.js","headerNav.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","state","mvCode","getMoviePoster","a","props","axios","get","params","key","then","response","items","console","log","catch","error","this","moviePosterSrc","movieTitle","date","mvDirector","mvActor","mvUserRating","mvLink","mvGrade","title","replace","Director","Actor","slice","className","src","alt","href","Component","Movie","grade","movieDate","movieGrage","HeaderNav","App","isLoding","movies","getMovies","targetDt","item","data","boxOfficeResult","dailyBoxOfficeList","setState","map","movieList","rank","temporal","movieCd","movieNm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gUAgGeA,E,4MA/EfC,MAAO,CACHC,OAAO,I,EAGXC,e,sBAAiB,sBAAAC,EAAA,6DAKF,EAAKC,MAAMH,OACZ,mCANG,SAQPI,IAAMC,IAAI,kFAAkF,CAC9FC,OAAO,CACHC,IAJE,sCAMPC,MAAK,SAASC,GACb,IAAMC,EAAQD,EACdE,QAAQC,IAAIF,MAMXG,OAAM,SAASC,GAChBH,QAAQC,IAAIE,MArBH,2C,kEA4CTC,KAAKd,mB,+BAGJ,IAAD,EAGoFc,KAAKhB,MAAtFiB,EAHH,EAGGA,eAAeC,EAHlB,EAGkBA,WAAWC,EAH7B,EAG6BA,KAAKC,EAHlC,EAGkCA,WAAWC,EAH7C,EAG6CA,QAAQC,EAHrD,EAGqDA,aAAaC,EAHlE,EAGkEA,OAAOC,EAHzE,EAGyEA,QACzEC,EAAMP,EAAWQ,QAAQ,gBAAgB,KACzCC,EAASP,EAAWM,QAAQ,IAAI,IAChCE,EAAMP,EAAQK,QAAQ,MAAM,KAGhC,OAFIE,EAAMA,EAAMC,MAAM,GAAG,GAGrB,yBAAKC,UAAU,aACX,yBAAKC,IAAKd,EAAgBe,IAAKd,IAC/B,yBAAKY,UAAU,kBACX,wBAAIA,UAAU,cAAcN,EAA5B,UACA,wBAAIM,UAAU,cAAcL,GAC5B,wBAAIK,UAAU,eAAeR,GAC7B,wBAAIQ,UAAU,aAAd,IAA4BX,GAC5B,wBAAIW,UAAU,iBAAd,cAA0CH,GAC1C,wBAAIG,UAAU,cAAd,WAAoCF,GACpC,wBAAIE,UAAU,aAAY,uBAAGG,KAAMV,GAAT,sD,GAnFhBW,aCSXC,MATf,YAAmC,IAAnBV,EAAkB,EAAlBA,MAAMW,EAAY,EAAZA,MAAMjB,EAAM,EAANA,KAExB,OADAP,QAAQC,IAAIY,GAER,yBAAKK,UAAU,SACX,kBAAC,EAAD,CAAcZ,WAAYO,EAAOY,UAAWlB,EAAMmB,WAAYF,MCa3DG,E,uKAbP,OAEI,gCACI,mEAAe,6D,GATPL,aCwETM,E,4MAlEbxC,MAAQ,CACNyC,UAAW,EACXC,OAAO,I,EAGTC,U,sBAAY,sBAAAxC,EAAA,4DAEE,mCACK,WAHP,SAKFE,IAAMC,IAAI,+FAA+F,CACzGC,OAAQ,CACMC,IALV,mCAMUoC,SALL,cAQAnC,MAAK,SAASC,GACb,IAAImC,EAAOnC,EAASoC,KAAKC,gBAAgBC,mBACzCpC,QAAQC,IAAIgC,GAEZ7B,KAAKiC,SAAS,CACZP,OAAO1B,KAAK6B,KACZJ,UAAS,OAGV3B,OAAM,SAASC,GAChBH,QAAQC,IAAIE,MArBpB,2C,kEA+BVC,KAAK2B,c,+BAGE,IAAD,EAEuB3B,KAAKhB,MAA1ByC,EAFF,EAEEA,SAAUC,EAFZ,EAEYA,OAClB,OACI,yBAAKZ,UAAU,aACX,kBAAC,EAAD,MACEW,EAAY,yBAAKX,UAAU,UACf,0BAAMA,UAAU,eAAhB,iBAGJ,yBAAKA,UAAU,UACVY,EAAOQ,KAAI,SAAAC,GAAS,OACjB,kBAAC,EAAD,CAAO3C,IAAK2C,EAAUC,KAAMjC,KAAMgC,EAAUE,SAAUpD,OAAQkD,EAAUG,QAAS7B,MAAO0B,EAAUI,QAASnB,MAAOe,EAAUC,gB,GArDxIlB,aCMEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEdxD,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMwD,c","file":"static/js/main.e87ca88b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\n\r\n\r\nclass MoviePoster extends Component {\r\n\r\n    \r\n// state = {\r\n//     moviePosterSrc:'img',\r\n//     movieTitle:'title',\r\n//     date:'pubDate',\r\n//     mvDirector:'director',\r\n//     mvActor:'actor',\r\n//     mvUserRating:0,\r\n//     mvLink:'link',\r\n//     mvGrade:'grade'\r\n// }\r\nstate ={\r\n    mvCode:''\r\n}\r\n\r\ngetMoviePoster = async () => {\r\n\r\n    // let title =this.props.movieTitle;   \r\n    // let grade=this.props.movieGrage;\r\n\r\n    let mvCode=this.props.mvCode\r\n    const key=\"88e5912e2bfb079238ca7936c0322922\";\r\n\r\n    await axios.get(\"https://www.kobis.or.kr/kobisopenapi/webservice/rest/movie/searchMovieInfo.json\",{\r\n        params:{\r\n            key:key\r\n        }\r\n    }).then(function(response) {\r\n        const items = response;\r\n        console.log(items);\r\n         \r\n        // this.setState({\r\n        //     mvCode:items\r\n        // });\r\n\r\n      }).catch(function(error) {\r\n        console.log(error);\r\n      });\r\n\r\n    \r\n    // var movieData=moviesPoster.data.items;\r\n    // console.log(movieData[0]);\r\n    \r\n    \r\n    // this.setState({\r\n    //     moviePosterSrc:movieData[0].image,\r\n    //     movieTitle:movieData[0].title,\r\n    //     date:movieData[0].pubDate,\r\n    //     mvDirector:movieData[0].director,\r\n    //     mvActor:movieData[0].actor,\r\n    //     mvUserRating:parseFloat(movieData[0].userRating),\r\n    //     mvLink:movieData[0].link,\r\n    //     mvGrade:grade\r\n    // });\r\n    \r\n\r\n}\r\n\r\ncomponentDidMount(){\r\n        this.getMoviePoster();\r\n}\r\n\r\nrender(){\r\n   \r\n\r\n    const {moviePosterSrc,movieTitle,date,mvDirector,mvActor,mvUserRating,mvLink,mvGrade} = this.state;\r\n    let title=movieTitle.replace(/(<([^>]+)>)/ig,\" \");\r\n    let Director=mvDirector.replace(\"|\",\"\");\r\n    let Actor=mvActor.replace(/\\|/g,\",\");\r\n        Actor=Actor.slice(0,-1);\r\n \r\n    return(\r\n        <div className=\"movieData\">\r\n            <img src={moviePosterSrc} alt={movieTitle}/>     \r\n            <div className=\"movieInnerData\">\r\n                <h4 className=\"moveiGrade\">{mvGrade}위</h4>\r\n                <h3 className=\"movieTitle\">{title}</h3>\r\n                <h2 className=\"movieRating\">{mvUserRating}</h2>\r\n                <h5 className=\"movieYear\"> {date}</h5>\r\n                <h5 className=\"movieDirector\">Director | {Director}</h5>\r\n                <h5 className=\"movieActor\">Actor | {Actor}</h5>\r\n                <h5 className=\"movieLink\"><a href={mvLink}>영화 자세히보기</a></h5>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n}\r\n\r\nexport default MoviePoster;","import React from 'react';\r\nimport MoviesPoster from \"./MoviePoster\";\r\n\r\n\r\nfunction Movie({title,grade,date}){\r\n    console.log(title);\r\n    return (\r\n        <div className=\"movie\">\r\n            <MoviesPoster movieTitle={title} movieDate={date} movieGrage={grade} />\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\r\n\r\nclass HeaderNav extends Component {\r\n\r\n\r\n    render(){\r\n\r\n    \r\n        return(\r\n\r\n            <header>\r\n                <h1>Movie 박스오피스<span>6월 3일자</span></h1>\r\n            </header>\r\n    \r\n        );\r\n\r\n\r\n    }\r\n    \r\n}\r\n\r\nexport default HeaderNav;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from \"./Movie\";\nimport axios from \"axios\";\nimport HeaderNav from \"./headerNav\";\n\nclass App extends Component {\n  \n  state = {\n    isLoding : true,\n    movies:[]\n  }\n\n  getMovies = async () => {\n\n      const key=\"88e5912e2bfb079238ca7936c0322922\";\n      const targetDt=\"20200603\"\n\n      await axios.get(\"https://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json\",{\n            params: {\n                          key: key,\n                          targetDt:targetDt\n\n                    }\n                  }).then(function(response) {\n                      let item = response.data.boxOfficeResult.dailyBoxOfficeList;\n                      console.log(item);\n                       \n                      this.setState({\n                        movies:this.item,\n                        isLoding:false\n                      });\n\n                    }).catch(function(error) {\n                      console.log(error);\n                    });\n  \n  \n          \n    \n   \n  }\n\n  componentDidMount(){\n    this.getMovies();\n  }\n\n  render(){\n\n    const { isLoding, movies } = this.state;\n    return(\n        <div className=\"container\">\n            <HeaderNav></HeaderNav>\n            { isLoding ? (<div className=\"loader\">\n                          <span className=\"loader_text\">Loading.....</span>\n                        </div>\n                    ) : ( \n                      <div className=\"movies\">\n                          {movies.map(movieList => (\n                              <Movie\tkey={movieList.rank} date={movieList.temporal} mvCode={movieList.movieCd} title={movieList.movieNm} grade={movieList.rank} />\n                          ))}\n                      </div>  \n                        \n            )}\n            \n         \n         \n        </div>\n\n    );//end of return\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('wrap')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}