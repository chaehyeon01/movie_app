{"version":3,"sources":["MoviePoster.js","Movie.js","headerNav.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","state","moviePosterSrc","movieTitle","mvGrade","getMoviePoster","a","title","props","grade","movieGrage","axios","get","params","query","headers","moviesPoster","console","log","data","documents","thumbnail_url","setState","this","className","src","alt","Component","Movie","date","movieDate","HeaderNav","App","pros","getMovies","item","key","targetDt","then","response","boxOfficeResult","dailyBoxOfficeList","catch","error","movies","isLoding","map","movieList","rank","temporal","movieNm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gUAsGeA,E,4MArFfC,MAAQ,CACJC,eAAe,MACfC,WAAW,QACXC,QAAQ,K,EAGZC,e,sBAAiB,gCAAAC,EAAA,6DAETC,EAAO,EAAKC,MAAML,WAClBM,EAAM,EAAKD,MAAME,WAEV,2CALE,SAOYC,IAAMC,IAAI,yCAAyC,CACxEC,OAAO,CACHC,MAAMP,EAAM,uBAEhBQ,QAAS,CACL,cAPG,8CALE,OAOPC,EAPO,OAmBbC,QAAQC,IAAIF,EAAaG,KAAKC,UAAU,GAAGC,eAG3C,EAAKC,SAAS,CACVpB,eAAec,EAAaG,KAAKC,UAAU,GAAGC,cAC9ClB,WAAWI,EACXH,QAAQK,IAzBC,2C,kEA2CTc,KAAKlB,mB,+BAGJ,IAAD,EAGwCkB,KAAKtB,MAA1CC,EAHH,EAGGA,eAAeC,EAHlB,EAGkBA,WAAWC,EAH7B,EAG6BA,QAOjC,OACI,yBAAKoB,UAAU,aACX,yBAAKC,IAAKvB,EAAgBwB,IAAI,iBAC1B,yBAAKF,UAAU,kBACf,wBAAIA,UAAU,cAAcpB,EAA5B,UACA,wBAAIoB,UAAU,cAAcrB,S,GAhFlBwB,aCSXC,MATf,YAAmC,IAAnBrB,EAAkB,EAAlBA,MAAME,EAAY,EAAZA,MAAMoB,EAAM,EAANA,KAExB,OADAZ,QAAQC,IAAIX,GAER,yBAAKiB,UAAU,SACX,kBAAC,EAAD,CAAcrB,WAAYI,EAAOuB,UAAWD,EAAMnB,WAAYD,MCa3DsB,E,uKAbP,OAEI,gCACI,mEAAe,6D,GATPJ,aCuETK,E,kDAjEb,WAAYC,GAAM,IAAD,8BACf,cAAMA,IAQRC,UATiB,sBASL,4BAAA5B,EAAA,4DAEE,mCACK,WACX6B,EAAM,GAJF,SAKFxB,IAAMC,IAAI,+FAA+F,CACzGC,OAAQ,CACMuB,IALV,mCAMUC,SALL,cAOAC,MAAK,SAASC,GACbJ,EAAOI,EAASpB,KAAKqB,gBAAgBC,mBACrCxB,QAAQC,IAAIiB,MAEXO,OAAM,SAASC,GAChB1B,QAAQC,IAAIyB,MAfpB,OAkBM,EAAKrB,SAAS,CACZsB,OAAOT,EACPU,UAAS,IApBjB,2CAPV,EAAK5C,MAAQ,CACX4C,UAAW,EACXD,OAAO,IAJM,E,gEAmCfrB,KAAKW,c,+BAGE,IAAD,EAEuBX,KAAKtB,MAA1B4C,EAFF,EAEEA,SAAUD,EAFZ,EAEYA,OAClB,OACI,yBAAKpB,UAAU,aACX,kBAAC,EAAD,MACEqB,EAAY,yBAAKrB,UAAU,UACf,0BAAMA,UAAU,eAAhB,iBAGJ,yBAAKA,UAAU,UACVoB,EAAOE,KAAI,SAAAC,GAAS,OACjB,kBAAC,EAAD,CAAOX,IAAKW,EAAUC,KAAMnB,KAAMkB,EAAUE,SAAW1C,MAAOwC,EAAUG,QAASzC,MAAOsC,EAAUC,gB,GApD9GrB,aCMEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMuB,c","file":"static/js/main.c215b1f5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\n\r\n\r\nclass MoviePoster extends Component {\r\n\r\n    \r\n// state = {\r\n//     moviePosterSrc:'img',\r\n//     movieTitle:'title',\r\n//     date:'pubDate',\r\n//     mvDirector:'director',\r\n//     mvActor:'actor',\r\n//     mvUserRating:0,\r\n//     mvLink:'link',\r\n//     mvGrade:'grade'\r\n// }\r\nstate = {\r\n    moviePosterSrc:'src',\r\n    movieTitle:'title',\r\n    mvGrade:'0'\r\n}\r\n\r\ngetMoviePoster = async () => {\r\n\r\n    let title =this.props.movieTitle;   \r\n    let grade=this.props.movieGrage;\r\n   \r\n    let ID_KEY=\"KakaoAK cfb2b47a7fc8f881928175ad41fb1640\";\r\n\r\n    const moviesPoster=await axios.get(\"https://dapi.kakao.com/v2/search/image\",{\r\n        params:{\r\n            query:title+\" 포스터\"  \r\n        },\r\n        headers: {\r\n            'Authorization': ID_KEY\r\n          }\r\n    });\r\n\r\n    \r\n    // var movieData=moviesPoster.data.items;\r\n\r\n    console.log(moviesPoster.data.documents[0].thumbnail_url);\r\n\r\n\r\n    this.setState({\r\n        moviePosterSrc:moviesPoster.data.documents[0].thumbnail_url,\r\n        movieTitle:title,\r\n        mvGrade:grade\r\n    });\r\n    \r\n    // this.setState({\r\n    //     moviePosterSrc:movieData[0].image,\r\n    //     movieTitle:movieData[0].title,\r\n    //     date:movieData[0].pubDate,\r\n    //     mvDirector:movieData[0].director,\r\n    //     mvActor:movieData[0].actor,\r\n    //     mvUserRating:parseFloat(movieData[0].userRating),\r\n    //     mvLink:movieData[0].link,\r\n    //     mvGrade:grade\r\n    // });\r\n    \r\n\r\n}\r\n\r\ncomponentDidMount(){\r\n        this.getMoviePoster();\r\n}\r\n\r\nrender(){\r\n   \r\n\r\n    const {moviePosterSrc,movieTitle,mvGrade} = this.state;\r\n    // const {moviePosterSrc,movieTitle,date,mvDirector,mvActor,mvUserRating,mvLink,mvGrade} = this.state;\r\n    // let title=movieTitle.replace(/(<([^>]+)>)/ig,\" \");\r\n    // let Director=mvDirector.replace(\"|\",\"\");\r\n    // let Actor=mvActor.replace(/\\|/g,\",\");\r\n    //     Actor=Actor.slice(0,-1);\r\n \r\n    return(\r\n        <div className=\"movieData\">\r\n            <img src={moviePosterSrc} alt=\"영화\" />\r\n                <div className=\"movieInnerData\">\r\n                <h4 className=\"moveiGrade\">{mvGrade}위</h4>\r\n                <h3 className=\"movieTitle\">{movieTitle}</h3>\r\n            </div>   \r\n            {/* <div className=\"movieInnerData\">\r\n                <h4 className=\"moveiGrade\">{mvGrade}위</h4>\r\n                <h3 className=\"movieTitle\">{title}</h3>\r\n                <h2 className=\"movieRating\">{mvUserRating}</h2>\r\n                <h5 className=\"movieYear\"> {date}</h5>\r\n                <h5 className=\"movieDirector\">Director | {Director}</h5>\r\n                <h5 className=\"movieActor\">Actor | {Actor}</h5>\r\n                <h5 className=\"movieLink\"><a href={mvLink}>영화 자세히보기</a></h5>\r\n            </div> */}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n}\r\n\r\nexport default MoviePoster;","import React from 'react';\r\nimport MoviesPoster from \"./MoviePoster\";\r\n\r\n\r\nfunction Movie({title,grade,date}){\r\n    console.log(title);\r\n    return (\r\n        <div className=\"movie\">\r\n            <MoviesPoster movieTitle={title} movieDate={date} movieGrage={grade} />\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\r\n\r\nclass HeaderNav extends Component {\r\n\r\n\r\n    render(){\r\n\r\n    \r\n        return(\r\n\r\n            <header>\r\n                <h1>Movie 박스오피스<span>6월 3일자</span></h1>\r\n            </header>\r\n    \r\n        );\r\n\r\n\r\n    }\r\n    \r\n}\r\n\r\nexport default HeaderNav;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from \"./Movie\";\nimport axios from \"axios\";\nimport HeaderNav from \"./headerNav\";\n\nclass App extends Component {\n\n  constructor(pros){\n    super(pros);\n    this.state = {\n      isLoding : true,\n      movies:[]\n    }\n  }\n  \n\n  getMovies = async () => {\n\n      const key=\"88e5912e2bfb079238ca7936c0322922\";\n      const targetDt=\"20200603\"\n      let item =[];\n      await axios.get(\"https://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json\",{\n            params: {\n                          key: key,\n                          targetDt:targetDt\n                    }\n                  }).then(function(response) {\n                      item = response.data.boxOfficeResult.dailyBoxOfficeList;\n                      console.log(item);\n                       \n                    }).catch(function(error) {\n                      console.log(error);\n                    });\n  \n                    this.setState({\n                      movies:item,\n                      isLoding:false\n                    });\n   \n  }\n\n  componentDidMount(){\n    this.getMovies();\n  }\n\n  render(){\n\n    const { isLoding, movies } = this.state;\n    return(\n        <div className=\"container\">\n            <HeaderNav></HeaderNav>\n            { isLoding ? (<div className=\"loader\">\n                          <span className=\"loader_text\">Loading.....</span>\n                        </div>\n                    ) : ( \n                      <div className=\"movies\">\n                          {movies.map(movieList => (\n                              <Movie\tkey={movieList.rank} date={movieList.temporal}  title={movieList.movieNm} grade={movieList.rank} />\n                          ))}\n                      </div>  \n                        \n            )}\n            \n         \n         \n        </div>\n\n    );//end of return\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('wrap')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}